const express = require('express');
const path = require('path');
const { MongoClient } = require('mongodb');
const { storeParsers } = require('./parsers/priceParsers');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3001;

// MongoDB connection
let db;
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/price-tracker';

async function connectDB() {
    try {
        console.log('üîó Connecting to MongoDB...');
        const client = new MongoClient(MONGODB_URI);
        await client.connect();
        db = client.db();
        console.log('‚úÖ Connected to MongoDB');
    } catch (error) {
        console.error('‚ùå MongoDB connection error:', error);
        // Fallback to file system if MongoDB fails
        console.log('üîÑ Using file system as fallback');
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏
async function saveDataToFile() {
    // –ü—Ä–æ–±—É–µ–º MongoDB —Å–Ω–∞—á–∞–ª–∞
    if (db) {
        try {
            await db.collection('data').updateOne(
                { type: 'priceData' },
                { 
                    $set: { 
                        currentPrices, 
                        priceHistory, 
                        lastUpdateTime, 
                        nextUpdateTime,
                        updatedAt: new Date()
                    } 
                },
                { upsert: true }
            );
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB');
            return;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB:', error);
        }
    }
    
    // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try {
        const data = {
            currentPrices,
            priceHistory,
            lastUpdateTime,
            nextUpdateTime
        };
        fs.writeFileSync('data/prices-data.json', JSON.stringify(data, null, 2));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª (fallback)');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª:', error.message);
    }
}

async function loadDataFromFile() {
    // –ü—Ä–æ–±—É–µ–º MongoDB —Å–Ω–∞—á–∞–ª–∞
    if (db) {
        try {
            const data = await db.collection('data').findOne({ type: 'priceData' });
            if (data) {
                currentPrices = data.currentPrices || [];
                priceHistory = data.priceHistory || [];
                lastUpdateTime = data.lastUpdateTime;
                nextUpdateTime = data.nextUpdateTime;
                console.log('üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ MongoDB');
                return;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MongoDB:', error);
        }
    }
    
    // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    try {
        if (fs.existsSync('data/prices-data.json')) {
            const data = JSON.parse(fs.readFileSync('data/prices-data.json', 'utf8'));
            currentPrices = data.currentPrices || [];
            priceHistory = data.priceHistory || [];
            lastUpdateTime = data.lastUpdateTime;
            nextUpdateTime = data.nextUpdateTime;
            console.log('üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ (fallback)');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ server.js –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
let currentPrices = [];
let priceHistory = [];
let lastUpdateTime = null;
let nextUpdateTime = null;
let isUpdating = false;

// –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
const stores = [
    // ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ stores ...
];

// –î–µ–º–æ-—Ü–µ–Ω—ã
const demoPrices = {
    // ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ demoPrices ...
};

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync('data')) {
    fs.mkdirSync('data');
}

// –û–ë–ù–û–í–ò–¢–ï —Ñ—É–Ω–∫—Ü–∏—é initializePrices —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å connectDB
async function initializePrices() {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await connectDB();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadDataFromFile();
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ (–±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç), –æ–±–Ω–æ–≤–ª—è–µ–º
    if (currentPrices.length === 0 || !lastUpdateTime || 
        (new Date() - new Date(lastUpdateTime)) > 10 * 60 * 1000) {
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä...');
        await fetchRealPrices();
    } else {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        const timeSinceUpdate = Math.round((new Date() - new Date(lastUpdateTime)) / 60000);
        console.log(`‚è∞ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ${timeSinceUpdate} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        nextUpdateTime = new Date(new Date(lastUpdateTime).getTime() + 10 * 60 * 1000).toISOString();
    }
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ server.js (fetchRealPrices, API endpoints –∏ —Ç.–¥.) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
function startAutoUpdate() {
    setInterval(async () => {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)...');
        await fetchRealPrices();
    }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
}

// API endpoints
app.get('/api/prices', (req, res) => {
    console.log('üìä API: Returning current prices');
    res.json({
        prices: currentPrices,
        lastUpdate: lastUpdateTime,
        nextUpdate: nextUpdateTime
    });
});

app.post('/api/check-now', async (req, res) => {
    console.log('üîÑ API: Manual price check requested');
    
    try {
        const newPrices = await fetchRealPrices();
        res.json({ 
            message: 'Real prices updated', 
            updated: new Date().toLocaleString('ru-RU'),
            storesChecked: newPrices.length,
            realPrices: newPrices.filter(p => p.source === 'real').length
        });
    } catch (error) {
        console.error('üí• Error during price check:', error);
        res.status(500).json({ 
            error: 'Failed to fetch prices',
            message: error.message 
        });
    }
});

app.get('/api/history/:storeId', (req, res) => {
    const storeId = parseInt(req.params.storeId);
    
    const storeHistory = priceHistory
        .filter(entry => entry.storeId === storeId)
        .slice(-20)
        .reverse();
    
    res.json(storeHistory);
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
app.get('/api/next-update', (req, res) => {
    res.json({
        nextUpdate: nextUpdateTime,
        lastUpdate: lastUpdateTime
    });
});

// Serve frontend
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`‚úÖ Server running on http://localhost:${PORT}`);
    console.log(`üìä Open http://localhost:${PORT} in your browser`);
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    await initializePrices();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startAutoUpdate();
});