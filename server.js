require('dotenv').config();
const express = require('express');
const path = require('path');
const { MongoClient } = require('mongodb');
const { storeParsers } = require('./parsers/priceParsers');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
const stores = [
    { id: 1, name: 'BigGeek', url: 'https://biggeek.ru/products/smartfon-apple-iphone-17-pro-1-tb-kosmiceskij-oranzevyj-cosmic-orange#esim' },
    { id: 2, name: 'Sotovik', url: 'https://spb.sotovik.shop/catalog/smartfony/apple_iphone_1/iphone_17_pro/15957/' },
    { id: 3, name: 'iPiter', url: 'https://ipiter.ru/shop/apple_iphone_17_pro_1tb_nano-sim_esim_cosmic_orange_color' },
    { id: 4, name: 'iStudio', url: 'https://spb.istudio-shop.ru/catalog/iphone/iphone-17-pro/apple-iphone-17-pro-1tb.html' },
    { id: 5, name: 'ReStore', url: 'https://re-store.ru/catalog/10117PRO1TBORGE/' },
    { id: 6, name: 'PiterGSM', url: 'https://pitergsm.ru/catalog/phones/iphone/iphone-17-pro/esim/122644/' },
    { id: 7, name: 'TehnoYard', url: 'http://tehnoyard.ru/smartfony/appleiphone/iphone-17-pro/apple-iphone-17-pro-1tb-esim-cosmic-orange-oranzhevyj' },
    { id: 8, name: 'Technolove', url: 'https://technolove.ru/catalog/product/smartfon_apple_iphone_17_pro_1tb_cosmic_orange_oranzhevyy_esim/' }
];

// –î–µ–º–æ-—Ü–µ–Ω—ã
const demoPrices = {
    'BigGeek': 149990,
    'Sotovik': 148990,
    'iPiter': 150490,
    'iStudio': 149590,
    'ReStore': 152990,
    'PiterGSM': 147990,
    'TehnoYard': 149190,
    'Technolove': 174990
};

let currentPrices = [];
let priceHistory = [];
let lastUpdateTime = null;
let nextUpdateTime = null;
let isUpdating = false;

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync('data')) {
    fs.mkdirSync('data');
}

// MongoDB connection - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô URI
let db;
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º MongoDB
const MONGODB_URI = process.env.MONGODB_URI;

async function connectDB() {
    // –ï—Å–ª–∏ MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (!MONGODB_URI) {
        console.log('üîó MongoDB URI –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É');
        return;
    }

    try {
        console.log('üîó Connecting to MongoDB...');
        const client = new MongoClient(MONGODB_URI);
        await client.connect();
        db = client.db();
        console.log('‚úÖ Connected to MongoDB');
    } catch (error) {
        console.error('‚ùå MongoDB connection error:', error.message);
        console.log('üîÑ Using file system as fallback');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
function saveDataToFile() {
    const data = {
        currentPrices,
        priceHistory,
        lastUpdateTime,
        nextUpdateTime
    };
    try {
        fs.writeFileSync('data/prices-data.json', JSON.stringify(data, null, 2));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
function loadDataFromFile() {
    try {
        if (fs.existsSync('data/prices-data.json')) {
            const data = JSON.parse(fs.readFileSync('data/prices-data.json', 'utf8'));
            currentPrices = data.currentPrices || [];
            priceHistory = data.priceHistory || [];
            lastUpdateTime = data.lastUpdateTime;
            nextUpdateTime = data.nextUpdateTime;
            console.log('üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${currentPrices.length} —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω`);
            console.log(`üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω–∞
function getLastPrice(storeId) {
    const storeHistory = priceHistory
        .filter(entry => entry.storeId === storeId)
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    return storeHistory.length > 0 ? storeHistory[0].price : null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
function addPriceToHistory(storeId, newPrice, source) {
    const lastPrice = getLastPrice(storeId);
    
    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    if (lastPrice !== null && lastPrice === newPrice) {
        const lastEntryIndex = priceHistory.findIndex(entry => 
            entry.storeId === storeId && entry.price === newPrice
        );
        
        if (lastEntryIndex !== -1) {
            priceHistory[lastEntryIndex].timestamp = new Date().toISOString();
            console.log(`üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${storeId}`);
        }
        return false; // –ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    }
    
    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    priceHistory.push({
        storeId: storeId,
        price: newPrice,
        timestamp: new Date().toISOString(),
        source: source
    });
    
    console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${storeId}: ${newPrice} —Ä—É–±.`);
    return true; // –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
async function fetchRealPrices() {
    if (isUpdating) {
        console.log('‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return currentPrices;
    }
    
    isUpdating = true;
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω...');
    const results = [];
    let changesDetected = 0;
    
    for (const store of stores) {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${store.name}...`);
            const parser = storeParsers[store.name];
            const price = await parser(store.url);
            let finalPrice = price;
            let source = 'real';
            
            if (price) {
                console.log(`‚úÖ ${store.name}: ${price.toLocaleString('ru-RU')} —Ä—É–±.`);
            } else {
                console.log(`‚ö†Ô∏è ${store.name}: —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ü–µ–Ω—É`);
                finalPrice = demoPrices[store.name];
                source = 'demo';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            const priceAdded = addPriceToHistory(store.id, finalPrice, source);
            if (priceAdded) {
                changesDetected++;
            }
            
            results.push({
                id: store.id,
                name: store.name,
                price: finalPrice,
                url: store.url,
                timestamp: new Date().toISOString(),
                source: source,
                changed: priceAdded
            });
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
            
        } catch (error) {
            console.error(`üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${store.name}:`, error.message);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ü–µ–Ω—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const finalPrice = demoPrices[store.name];
            const priceAdded = addPriceToHistory(store.id, finalPrice, 'error');
            if (priceAdded) {
                changesDetected++;
            }
            
            results.push({
                id: store.id,
                name: store.name,
                price: finalPrice,
                url: store.url,
                timestamp: new Date().toISOString(),
                source: 'error',
                changed: priceAdded
            });
        }
    }
    
    currentPrices = results;
    lastUpdateTime = new Date().toISOString();
    nextUpdateTime = new Date(Date.now() + 10 * 60 * 1000).toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    saveDataToFile();
    isUpdating = false;
    
    console.log(`‚úÖ –°–±–æ—Ä —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–∑–º–µ–Ω–µ–Ω–∏–π: ${changesDetected}`);
    return results;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initializePrices() {
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadDataFromFile();
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ (–±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç), –æ–±–Ω–æ–≤–ª—è–µ–º
    if (currentPrices.length === 0 || !lastUpdateTime || 
        (new Date() - new Date(lastUpdateTime)) > 10 * 60 * 1000) {
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä...');
        await fetchRealPrices();
    } else {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        const timeSinceUpdate = Math.round((new Date() - new Date(lastUpdateTime)) / 60000);
        console.log(`‚è∞ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ${timeSinceUpdate} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        nextUpdateTime = new Date(new Date(lastUpdateTime).getTime() + 10 * 60 * 1000).toISOString();
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
function startAutoUpdate() {
    setInterval(async () => {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)...');
        await fetchRealPrices();
    }, 10 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
}

// API endpoints
app.get('/api/prices', (req, res) => {
    console.log('üìä API: Returning current prices');
    res.json({
        prices: currentPrices,
        lastUpdate: lastUpdateTime,
        nextUpdate: nextUpdateTime
    });
});

app.post('/api/check-now', async (req, res) => {
    console.log('üîÑ API: Manual price check requested');
    
    try {
        const newPrices = await fetchRealPrices();
        res.json({ 
            message: 'Real prices updated', 
            updated: new Date().toLocaleString('ru-RU'),
            storesChecked: newPrices.length,
            realPrices: newPrices.filter(p => p.source === 'real').length
        });
    } catch (error) {
        console.error('üí• Error during price check:', error);
        res.status(500).json({ 
            error: 'Failed to fetch prices',
            message: error.message 
        });
    }
});

app.get('/api/history/:storeId', (req, res) => {
    const storeId = parseInt(req.params.storeId);
    
    const storeHistory = priceHistory
        .filter(entry => entry.storeId === storeId)
        .slice(-20)
        .reverse();
    
    res.json(storeHistory);
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
app.get('/api/next-update', (req, res) => {
    res.json({
        nextUpdate: nextUpdateTime,
        lastUpdate: lastUpdateTime
    });
});

// Serve frontend
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`‚úÖ Server running on http://localhost:${PORT}`);
    console.log(`üìä Open http://localhost:${PORT} in your browser`);
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î (–Ω–æ –Ω–µ –∂–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    connectDB();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    await initializePrices();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startAutoUpdate();
});